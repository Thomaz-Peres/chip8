using System.Collections.Immutable;

public static class Fonts
{
    public static IDictionary<ushort, byte[]> Font =>
    new Dictionary<ushort, byte[]>()
    {
        { 0,   new byte[] { 0xF0, 0x90, 0x90, 0x90, 0xF0, }},
        { 1,   new byte[] { 0x20, 0x60, 0x20, 0x20, 0x70, }},
        { 2,   new byte[] { 0xF0, 0x10, 0xF0, 0x80, 0xF0, }},
        { 3,   new byte[] { 0xF0, 0x10, 0xF0, 0x10, 0xF0, }},
        { 4,   new byte[] { 0x90, 0x90, 0xF0, 0x10, 0x10, }},
        { 5,   new byte[] { 0xF0, 0x80, 0xF0, 0x10, 0xF0, }},
        { 6,   new byte[] { 0xF0, 0x80, 0xF0, 0x90, 0xF0, }},
        { 7,   new byte[] { 0xF0, 0x10, 0x20, 0x40, 0x40, }},
        { 8,   new byte[] { 0xF0, 0x90, 0xF0, 0x90, 0xF0, }},
        { 9,   new byte[] { 0xF0, 0x90, 0xF0, 0x10, 0xF0, }},
        { 0xA, new byte[] { 0xF0, 0x90, 0xF0, 0x90, 0x90, }},
        { 0xB, new byte[] { 0xE0, 0x90, 0xE0, 0x90, 0xE0, }},
        { 0xC, new byte[] { 0xF0, 0x80, 0x80, 0x80, 0xF0, }},
        { 0xD, new byte[] { 0xE0, 0x90, 0x90, 0x90, 0xE0, }},
        { 0xE, new byte[] { 0xF0, 0x80, 0xF0, 0x80, 0xF0, }},
        { 0xF, new byte[] { 0xF0, 0x80, 0xF0, 0x80, 0x80, }},
    }.ToImmutableDictionary();

    public static readonly byte[] Sprites =
    {
        0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
        0x20, 0x60, 0x20, 0x20, 0x70, // 1
        0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
        0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
        0x90, 0x90, 0xF0, 0x10, 0x10, // 4
        0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
        0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
        0xF0, 0x10, 0x20, 0x40, 0x40, // 7
        0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
        0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
        0xF0, 0x90, 0xF0, 0x90, 0x90, // A
        0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
        0xF0, 0x80, 0x80, 0x80, 0xF0, // C
        0xE0, 0x90, 0x90, 0x90, 0xE0, // D
        0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
        0xF0, 0x80, 0xF0, 0x80, 0x80  // F
    };
}
